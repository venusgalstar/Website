{"ast":null,"code":"import{createStore}from'redux';import Web3 from'web3';import config from'../contract/config';var _initialState={price_usd:0,price_bnb:0,account:\"\"};var init=function init(_init){console.log(\"config\",config);var provider=Web3.providers.HttpProvider(config.testNetUrl);_init.provider=provider;console.log(\"init\",provider);_init.web3=new Web3(Web3.givenProvider||provider);return _init;};var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:init(_initialState);var action=arguments.length>1?arguments[1]:undefined;if(action.type==='UPDATE_TOKEN_PRICE'){return Object.assign({},state,{price_usd:action.payload.price_usd,price_bnb:action.payload.price_bnb});}else if(action.type===\"UPDATE_WALLET_ACCOUNT\"){console.log(\"accounts updated\");return Object.assign({},state,{account:action.payload.account});}else if(action.type===\"UPDATE_CHAIN_ID\"){return Object.assign({},state,{chainId:action.payload.chainId});}return state;};var store=createStore(reducer);if(window.ethereum){window.ethereum.on('accountsChanged',function(accounts){store.dispatch({type:\"UPDATE_WALLET_ACCOUNT\",payload:{account:accounts[0]}});});window.ethereum.on('chainChanged',function(networkId){store.dispatch({type:\"UPDATE_CHAIN_ID\",payload:{chainId:networkId}});});}export default store;","map":{"version":3,"sources":["D:/Work/Upwork/Luke,Eric,AvalancheDefi/Milestone3/Fire/Phoenix/src/store/index.js"],"names":["createStore","Web3","config","_initialState","price_usd","price_bnb","account","init","console","log","provider","providers","HttpProvider","testNetUrl","web3","givenProvider","reducer","state","action","type","Object","assign","payload","chainId","store","window","ethereum","on","accounts","dispatch","networkId"],"mappings":"AAAA,OAASA,WAAT,KAA4B,OAA5B,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,aAAa,CAAG,CAClBC,SAAS,CAAE,CADO,CAElBC,SAAS,CAAE,CAFO,CAGlBC,OAAO,CAAE,EAHS,CAAtB,CAOA,GAAMC,CAAAA,IAAI,CAAG,cAACA,KAAD,CAAU,CACnBC,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAsBP,MAAtB,EACA,GAAMQ,CAAAA,QAAQ,CAAGT,IAAI,CAACU,SAAL,CAAeC,YAAf,CAA4BV,MAAM,CAACW,UAAnC,CAAjB,CACAN,KAAI,CAACG,QAAL,CAAgBA,QAAhB,CACAF,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoBC,QAApB,EACAH,KAAI,CAACO,IAAL,CAAY,GAAIb,CAAAA,IAAJ,CAASA,IAAI,CAACc,aAAL,EAAsBL,QAA/B,CAAZ,CACA,MAAOH,CAAAA,KAAP,CACH,CAPD,CAUA,GAAMS,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAyC,IAAxCC,CAAAA,KAAwC,2DAAhCV,IAAI,CAACJ,aAAD,CAA4B,IAAXe,CAAAA,MAAW,2CAErD,GAAIA,MAAM,CAACC,IAAP,GAAgB,oBAApB,CAA0C,CACtC,MAAOC,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAyB,CAC5Bb,SAAS,CAAEc,MAAM,CAACI,OAAP,CAAelB,SADE,CAE5BC,SAAS,CAAEa,MAAM,CAACI,OAAP,CAAejB,SAFE,CAAzB,CAAP,CAIH,CALD,IAKO,IAAIa,MAAM,CAACC,IAAP,GAAgB,uBAApB,CAA6C,CAChDX,OAAO,CAACC,GAAR,CAAY,kBAAZ,EACA,MAAOW,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAyB,CAC5BX,OAAO,CAAEY,MAAM,CAACI,OAAP,CAAehB,OADI,CAAzB,CAAP,CAGH,CALM,IAKA,IAAIY,MAAM,CAACC,IAAP,GAAgB,iBAApB,CAAuC,CAC1C,MAAOC,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAyB,CAC5BM,OAAO,CAAEL,MAAM,CAACI,OAAP,CAAeC,OADI,CAAzB,CAAP,CAGH,CACD,MAAON,CAAAA,KAAP,CACH,CAlBD,CAoBA,GAAMO,CAAAA,KAAK,CAAGxB,WAAW,CAACgB,OAAD,CAAzB,CAGA,GAAIS,MAAM,CAACC,QAAX,CAAqB,CACjBD,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,CAAsC,SAAUC,QAAV,CAAoB,CAEtDJ,KAAK,CAACK,QAAN,CAAe,CACXV,IAAI,CAAE,uBADK,CAEXG,OAAO,CAAE,CAAChB,OAAO,CAAEsB,QAAQ,CAAC,CAAD,CAAlB,CAFE,CAAf,EAIH,CAND,EAQAH,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,cAAnB,CAAmC,SAAUG,SAAV,CAAqB,CAEpDN,KAAK,CAACK,QAAN,CAAe,CACXV,IAAI,CAAC,iBADM,CAEXG,OAAO,CAAE,CAACC,OAAO,CAAEO,SAAV,CAFE,CAAf,EAIH,CAND,EAOH,CAID,cAAeN,CAAAA,KAAf","sourcesContent":["import { createStore } from 'redux'\r\nimport Web3 from 'web3';\r\nimport config from '../contract/config';\r\n\r\nconst _initialState = {\r\n    price_usd: 0,\r\n    price_bnb: 0,\r\n    account: \"\"\r\n}\r\n\r\n\r\nconst init = (init) => {\r\n    console.log(\"config\", config);\r\n    const provider = Web3.providers.HttpProvider(config.testNetUrl);\r\n    init.provider = provider;\r\n    console.log(\"init\", provider);\r\n    init.web3 = new Web3(Web3.givenProvider || provider);\r\n    return init;\r\n}\r\n\r\n\r\nconst reducer = (state = init(_initialState), action) => {\r\n\r\n    if (action.type === 'UPDATE_TOKEN_PRICE') {\r\n        return Object.assign({}, state, {\r\n            price_usd: action.payload.price_usd,\r\n            price_bnb: action.payload.price_bnb\r\n        })\r\n    } else if (action.type === \"UPDATE_WALLET_ACCOUNT\") {\r\n        console.log(\"accounts updated\");\r\n        return Object.assign({}, state, {\r\n            account: action.payload.account\r\n        });\r\n    } else if (action.type === \"UPDATE_CHAIN_ID\") {\r\n        return Object.assign({}, state, {\r\n            chainId: action.payload.chainId\r\n        });\r\n    }\r\n    return state;\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\nif (window.ethereum) {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n\r\n        store.dispatch({\r\n            type: \"UPDATE_WALLET_ACCOUNT\",\r\n            payload: {account: accounts[0]}\r\n        });\r\n    })\r\n    \r\n    window.ethereum.on('chainChanged', function (networkId) {\r\n\r\n        store.dispatch({\r\n            type:\"UPDATE_CHAIN_ID\",\r\n            payload: {chainId: networkId}\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}