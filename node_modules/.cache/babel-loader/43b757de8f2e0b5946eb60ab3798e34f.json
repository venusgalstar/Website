{"ast":null,"code":"import { createStore } from 'redux';\nimport Web3 from 'web3';\nimport config from '../contract/config';\nimport { toast } from 'react-toastify';\nconst _initialState = {\n  price_usd: 0,\n  price_bnb: 0,\n  account: \"\",\n  all_nodes: 0,\n  my_nodes: [],\n  my_nfts: [],\n  grand_nft_url: \"\",\n  master_nft_url: \"\",\n  currentTime: 0,\n  contract_status: 0\n};\n\nconst init = init => {\n  return init;\n};\n\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\nconst web3 = new Web3(Web3.givenProvider || provider);\nconst tokenContract = new web3.eth.Contract(config.FireAbi, config.FireToken);\nconst nftContract = new web3.eth.Contract(config.NFTAbi, config.FireNFT);\nconst rewardConatract = new web3.eth.Contract(config.RewardAbi, config.Reward);\n\nconst reducer = (state = init(_initialState), action) => {\n  if (action.type === 'UPDATE_TOKEN_PRICE') {\n    return Object.assign({}, state, {\n      price_usd: action.payload.price_usd,\n      price_bnb: action.payload.price_bnb\n    });\n  } else if (action.type === \"UPDATE_CHAIN_ID\") {\n    return Object.assign({}, state, {\n      chainId: action.payload.chainId\n    });\n  } else if (action.type === 'CONNECT_WALLET') {\n    if (state.chainId === undefined || state.chainId !== config.chainId) {\n      toast.info(\"Change network to Avalanche C Chain!\", {\n        position: \"top-center\",\n        autoClose: 3000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n\n    web3.eth.getAccounts((err, accounts) => {\n      store.dispatch({\n        type: \"GET_USER_INFO\",\n        payload: {\n          account: accounts[0]\n        }\n      });\n    });\n  } else if (action.type === 'SET_CONTRACT_STATUS') {\n    if (!state.account) {\n      connectAlert();\n    }\n\n    rewardConatract.methods.setContractStatus(action.payload.param).send({\n      from: state.account\n    }).then(() => {\n      updateGlobalInfo();\n    }).catch(() => console.log);\n  } else if (action.type === \"SET_NFT_URL\") {\n    if (!state.account) {\n      connectAlert();\n    }\n\n    if (action.payload.type === \"master\") {\n      nftContract.methods.setMasterNFTURI(action.payload.url).send({\n        from: state.account\n      }).then(() => console.log).catch(() => console.log);\n    } else if (action.payload.type === \"grand\") {\n      nftContract.methods.setGrandNFTURI(action.payload.url).send({\n        from: state.account\n      }).then(() => console.log).catch(() => console.log);\n    }\n  } else if (action.type === \"CLAIM_NODE\") {\n    if (!state.account) {\n      connectAlert();\n    }\n\n    rewardConatract.methods.getClaimFee().call().then(claimFee => {\n      if (action.payload.node_id !== -1) {\n        rewardConatract.methods.claimByNode(action.payload.node_id).send({\n          from: state.account,\n          value: claimFee,\n          gas: 210000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      } else if (action.payload.node_id === -1) {\n        rewardConatract.methods.claimAll().send({\n          from: state.account,\n          value: claimFee,\n          gas: 210000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      }\n    }).catch(() => console.log);\n  } else if (action.type === \"BUY_NFT_ART\") {\n    console.log(\"account \", state.account);\n\n    if (!state.account) {\n      connectAlert();\n      return;\n    }\n\n    if (action.payload.type === \"master\") {\n      rewardConatract.methods.getMasterNFTPrice().call().then(price => {\n        rewardConatract.methods.buyNFT(0, 1).send({\n          from: state.account,\n          value: price,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      });\n    } else if (action.payload.type === \"grand\") {\n      rewardConatract.methods.getGrandNFTPrice().call().then(price => {\n        rewardConatract.methods.buyNFT(1, 1).send({\n          from: state.account,\n          value: price,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      });\n    }\n  } else if (action.type === \"PAY_NODE_FEE\") {\n    rewardConatract.methods.getNodeMaintenanceFee().call().then(threeFee => {\n      rewardConatract.methods.payNodeFee(Number(action.payload.node_id), 0).send({\n        from: state.account,\n        value: action.payload.duration * threeFee,\n        gas: 2100000\n      }).then(() => {\n        store.dispatch({\n          type: \"GET_USER_INFO\"\n        });\n      }).catch(() => console.log);\n    });\n  } else if (action.type === \"CREATE_NODE\") {\n    if (!state.account) {\n      connectAlert();\n    }\n\n    const promise = [];\n    promise.push(rewardConatract.methods.getNodePrice().call());\n    promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\n    Promise.all(promise).then(result => {\n      console.log(\"result\", result);\n      tokenContract.methods.approve(config.Reward, result[0]).send({\n        from: state.account,\n        gas: 210000\n      }).then(ret => {\n        rewardConatract.methods.buyNode(1).send({\n          from: state.account,\n          value: result[1],\n          gas: 2100000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        }).catch(() => {\n          console.log(\"error\");\n        });\n      }).catch(ret => {\n        console.log(\"err\", ret);\n      });\n    });\n  } else if (action.type === \"GET_USER_INFO\") {\n    let account = action.payload && action.payload.account ? action.payload.account : state.account;\n    let promise = [];\n    promise.push(rewardConatract.methods.getNFTList(account).call());\n    promise.push(rewardConatract.methods.getNodeList(account).call());\n    promise.push(rewardConatract.methods.getRewardAmount(account).call());\n    promise.push(nftContract.methods.getMasterNFTURI().call());\n    promise.push(nftContract.methods.getGrandNFTURI().call());\n    Promise.all(promise).then(result => {\n      const nodes = [];\n\n      for (var index in result[1]) {\n        nodes.push({\n          createTime: result[1][index].createTime,\n          lastTime: result[1][index].lastTime,\n          grandNFT: result[2].curGrandNFTEnable[index],\n          masterNFT: result[2].curMasterNFTEnable[index],\n          reward: Number(web3.utils.fromWei(result[2].nodeRewards[index]))\n        });\n      }\n\n      store.dispatch({\n        type: \"RETURN_DATA\",\n        payload: {\n          my_nfts: result[0],\n          my_nodes: nodes,\n          account: account,\n          reward: result[2],\n          master_nft_url: result[3],\n          grand_nft_url: result[4],\n          currentTime: result[2].currentTime * 1\n        }\n      });\n    });\n  } else if (action.type === \"RETURN_DATA\") {\n    return Object.assign({}, state, action.payload);\n  }\n\n  return state;\n};\n\nconst connectAlert = () => {\n  toast.info(\"Please connect your wallet!\", {\n    position: \"top-center\",\n    autoClose: 3000,\n    hideProgressBar: true,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined\n  });\n};\n\nconst chechNetwork = chainId => {\n  if (chainId === undefined || chainId !== config.chainId) {\n    toast.info(\"Change network to Avalanche C Chain!\", {\n      position: \"top-center\",\n      autoClose: 3000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  }\n};\n\nconst updateGlobalInfo = () => {\n  let promise = [];\n  promise.push(nftContract.methods.getMasterNFTURI().call());\n  promise.push(nftContract.methods.getGrandNFTURI().call());\n  promise.push(rewardConatract.methods.getTotalNodeCount().call());\n  promise.push(rewardConatract.methods.getContractStatus().call());\n  Promise.all(promise).then(result => {\n    store.dispatch({\n      type: \"RETURN_DATA\",\n      payload: {\n        master_nft_url: result[0],\n        grand_nft_url: result[1],\n        all_nodes: result[2],\n        contract_status: result[3]\n      }\n    });\n  });\n};\n\nconst store = createStore(reducer);\n\nif (window.ethereum) {\n  window.ethereum.on('accountsChanged', function (accounts) {\n    store.dispatch({\n      type: \"GET_USER_INFO\",\n      payload: {\n        account: accounts[0]\n      }\n    });\n  });\n  window.ethereum.on('chainChanged', function (chainId) {\n    chechNetwork(chainId);\n    store.dispatch({\n      type: \"UPDATE_CHAIN_ID\",\n      payload: {\n        chainId: chainId\n      }\n    });\n  });\n  web3.eth.net.getId().then(chainId => {\n    chechNetwork(chainId);\n    store.dispatch({\n      type: \"UPDATE_CHAIN_ID\",\n      payload: {\n        chainId: chainId\n      }\n    });\n  });\n  updateGlobalInfo();\n}\n\nexport default store;","map":{"version":3,"sources":["D:/Work/Upwork/Luke,Eric,AvalancheDefi/Milestone3/Fire/Phoenix/src/store/index.js"],"names":["createStore","Web3","config","toast","_initialState","price_usd","price_bnb","account","all_nodes","my_nodes","my_nfts","grand_nft_url","master_nft_url","currentTime","contract_status","init","provider","providers","HttpProvider","testNetUrl","web3","givenProvider","tokenContract","eth","Contract","FireAbi","FireToken","nftContract","NFTAbi","FireNFT","rewardConatract","RewardAbi","Reward","reducer","state","action","type","Object","assign","payload","chainId","undefined","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","getAccounts","err","accounts","store","dispatch","connectAlert","methods","setContractStatus","param","send","from","then","updateGlobalInfo","catch","console","log","setMasterNFTURI","url","setGrandNFTURI","getClaimFee","call","claimFee","node_id","claimByNode","value","gas","claimAll","getMasterNFTPrice","price","buyNFT","getGrandNFTPrice","getNodeMaintenanceFee","threeFee","payNodeFee","Number","duration","promise","push","getNodePrice","Promise","all","result","approve","ret","buyNode","getNFTList","getNodeList","getRewardAmount","getMasterNFTURI","getGrandNFTURI","nodes","index","createTime","lastTime","grandNFT","curGrandNFTEnable","masterNFT","curMasterNFTEnable","reward","utils","fromWei","nodeRewards","chechNetwork","getTotalNodeCount","getContractStatus","window","ethereum","on","net","getId"],"mappings":"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","sourcesContent":["import { createStore } from 'redux'\r\nimport Web3 from 'web3';\r\nimport config from '../contract/config';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\n\r\nconst _initialState = {\r\n    price_usd: 0,\r\n    price_bnb: 0,\r\n    account: \"\",\r\n    all_nodes: 0,\r\n    my_nodes: [],\r\n    my_nfts: [],\r\n    grand_nft_url: \"\",\r\n    master_nft_url: \"\",\r\n    currentTime: 0,\r\n    contract_status: 0,\r\n}\r\n\r\n\r\nconst init = (init) => {\r\n\r\n    return init;\r\n}\r\n\r\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\r\nconst web3 = new Web3(Web3.givenProvider || provider);\r\n\r\nconst tokenContract = new web3.eth.Contract(config.FireAbi, config.FireToken);\r\nconst nftContract = new web3.eth.Contract(config.NFTAbi, config.FireNFT);\r\nconst rewardConatract = new web3.eth.Contract(config.RewardAbi, config.Reward);\r\n\r\n\r\nconst reducer = (state = init(_initialState), action) => {\r\n\r\n    if (action.type === 'UPDATE_TOKEN_PRICE') {\r\n        return Object.assign({}, state, {\r\n            price_usd: action.payload.price_usd,\r\n            price_bnb: action.payload.price_bnb\r\n        })\r\n    } else if (action.type === \"UPDATE_CHAIN_ID\") {\r\n        return Object.assign({}, state, {\r\n            chainId: action.payload.chainId\r\n        });\r\n    } else if (action.type === 'CONNECT_WALLET') {\r\n        if (state.chainId === undefined || state.chainId !== config.chainId) {\r\n            toast.info(\"Change network to Avalanche C Chain!\", {\r\n                position: \"top-center\",\r\n                autoClose: 3000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n        web3.eth.getAccounts((err, accounts) => {\r\n            store.dispatch({\r\n                type: \"GET_USER_INFO\",\r\n                payload: { account: accounts[0] }\r\n            });\r\n        })\r\n    } else if (action.type === 'SET_CONTRACT_STATUS') {\r\n        if (!state.account) {\r\n            connectAlert();\r\n        }\r\n\r\n        rewardConatract.methods.setContractStatus(action.payload.param)\r\n            .send({ from: state.account })\r\n            .then(() => { updateGlobalInfo() })\r\n            .catch(() => console.log);\r\n\r\n    } else if (action.type === \"SET_NFT_URL\") {\r\n\r\n        if (!state.account) {\r\n            connectAlert();\r\n        }\r\n\r\n        if (action.payload.type === \"master\") {\r\n            nftContract.methods.setMasterNFTURI(action.payload.url)\r\n                .send({ from: state.account })\r\n                .then(() => console.log)\r\n                .catch(() => console.log);\r\n        } else if (action.payload.type === \"grand\") {\r\n            nftContract.methods.setGrandNFTURI(action.payload.url)\r\n                .send({ from: state.account })\r\n                .then(() => console.log)\r\n                .catch(() => console.log);\r\n        }\r\n    } else if (action.type === \"CLAIM_NODE\") {\r\n\r\n        if (!state.account) {\r\n            connectAlert();\r\n        }\r\n        rewardConatract.methods.getClaimFee().call()\r\n            .then((claimFee) => {\r\n\r\n                if (action.payload.node_id !== -1) {\r\n\r\n                    rewardConatract.methods.claimByNode(action.payload.node_id)\r\n                        .send({ from: state.account, value: claimFee, gas: 210000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                } else if (action.payload.node_id === -1) {\r\n                    rewardConatract.methods.claimAll()\r\n                        .send({ from: state.account, value: claimFee, gas: 210000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                }\r\n            })\r\n            .catch(() => console.log)\r\n\r\n\r\n    } else if (action.type === \"BUY_NFT_ART\") {\r\n        console.log(\"account \", state.account);\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return;\r\n        }\r\n        if (action.payload.type === \"master\") {\r\n            rewardConatract.methods.getMasterNFTPrice().call()\r\n                .then((price) => {\r\n                    rewardConatract.methods.buyNFT(0, 1)\r\n                        .send({ from: state.account, value: price, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                })\r\n        } else if (action.payload.type === \"grand\") {\r\n            rewardConatract.methods.getGrandNFTPrice().call()\r\n                .then((price) => {\r\n                    rewardConatract.methods.buyNFT(1, 1)\r\n                        .send({ from: state.account, value: price, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                })\r\n        }\r\n\r\n    } else if (action.type === \"PAY_NODE_FEE\") {\r\n\r\n        rewardConatract.methods.getNodeMaintenanceFee().call()\r\n            .then((threeFee) => {\r\n                rewardConatract.methods.payNodeFee(Number(action.payload.node_id), 0)\r\n                    .send({ from: state.account, value: action.payload.duration * threeFee, gas: 2100000 })\r\n                    .then(() => {\r\n                        store.dispatch({ type: \"GET_USER_INFO\" });\r\n                    }).catch(() =>\r\n                        console.log\r\n                    )\r\n            })\r\n    } else if (action.type === \"CREATE_NODE\") {\r\n        if (!state.account) {\r\n            connectAlert();\r\n        }\r\n        const promise = [];\r\n        promise.push(rewardConatract.methods.getNodePrice().call());\r\n        promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\r\n        Promise.all(promise).then((result) => {\r\n            console.log(\"result\", result);\r\n            \r\n            tokenContract.methods.approve(config.Reward, result[0]).send({ from: state.account, gas: 210000 })\r\n            .then((ret) => {\r\n                rewardConatract.methods.buyNode(1).send({ from: state.account, value: result[1], gas: 2100000 })\r\n                    .then(() => {\r\n                        store.dispatch({ type: \"GET_USER_INFO\" });\r\n                    }).catch(() => {\r\n                        console.log(\"error\");\r\n                    });\r\n            }).catch((ret) => { console.log(\"err\", ret) });\r\n        });\r\n\r\n    } else if (action.type === \"GET_USER_INFO\") {\r\n\r\n        let account = (action.payload && action.payload.account) ? action.payload.account : state.account;\r\n        let promise = [];\r\n        promise.push(rewardConatract.methods.getNFTList(account).call());\r\n        promise.push(rewardConatract.methods.getNodeList(account).call());\r\n        promise.push(rewardConatract.methods.getRewardAmount(account).call());\r\n        promise.push(nftContract.methods.getMasterNFTURI().call());\r\n        promise.push(nftContract.methods.getGrandNFTURI().call());\r\n        Promise.all(promise).then((result) => {\r\n            const nodes = [];\r\n            for (var index in result[1]) {\r\n                nodes.push({\r\n                    createTime: result[1][index].createTime,\r\n                    lastTime: result[1][index].lastTime,\r\n                    grandNFT: result[2].curGrandNFTEnable[index],\r\n                    masterNFT: result[2].curMasterNFTEnable[index],\r\n                    reward: Number(web3.utils.fromWei(result[2].nodeRewards[index]))\r\n                });\r\n            }\r\n            store.dispatch({\r\n                type: \"RETURN_DATA\", payload:\r\n                {\r\n                    my_nfts: result[0],\r\n                    my_nodes: nodes,\r\n                    account: account,\r\n                    reward: result[2],\r\n                    master_nft_url: result[3],\r\n                    grand_nft_url: result[4],\r\n                    currentTime: result[2].currentTime * 1\r\n                }\r\n            });\r\n        });\r\n    } else if (action.type === \"RETURN_DATA\") {\r\n        return Object.assign({}, state, action.payload);\r\n    }\r\n    return state;\r\n}\r\n\r\nconst connectAlert = () => {\r\n    toast.info(\"Please connect your wallet!\", {\r\n        position: \"top-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n    });\r\n}\r\n\r\nconst chechNetwork = (chainId) => {\r\n    if (chainId === undefined || chainId !== config.chainId) {\r\n        toast.info(\"Change network to Avalanche C Chain!\", {\r\n            position: \"top-center\",\r\n            autoClose: 3000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nconst updateGlobalInfo = () => {\r\n    let promise = [];\r\n    promise.push(nftContract.methods.getMasterNFTURI().call());\r\n    promise.push(nftContract.methods.getGrandNFTURI().call());\r\n    promise.push(rewardConatract.methods.getTotalNodeCount().call());\r\n    promise.push(rewardConatract.methods.getContractStatus().call());\r\n    Promise.all(promise).then((result) => {\r\n        store.dispatch({\r\n            type: \"RETURN_DATA\",\r\n            payload: {\r\n                master_nft_url: result[0],\r\n                grand_nft_url: result[1],\r\n                all_nodes: result[2],\r\n                contract_status: result[3]\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\nconst store = createStore(reducer);\r\nif (window.ethereum) {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n        store.dispatch({\r\n            type: \"GET_USER_INFO\",\r\n            payload: { account: accounts[0] }\r\n        });\r\n    })\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n        chechNetwork(chainId);\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: chainId }\r\n        });\r\n    });\r\n    web3.eth.net.getId().then((chainId) => {\r\n        chechNetwork(chainId);\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: chainId }\r\n        });\r\n    })\r\n    updateGlobalInfo();\r\n}\r\n\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}