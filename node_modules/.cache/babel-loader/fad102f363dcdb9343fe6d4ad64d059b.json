{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Upwork\\\\Luke,Eric,AvalancheDefi\\\\Milestone3\\\\Fire\\\\MyPhoenix\\\\Website\\\\src\\\\components\\\\common\\\\rt_chart.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-streaming\";\nimport moment from \"moment\";\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = require(\"react-chartjs-2\").Chart;\n\nconst chartColors = {\n  red: \"rgb(255, 99, 132)\",\n  orange: \"rgb(255, 159, 64)\",\n  yellow: \"rgb(255, 205, 86)\",\n  green: \"rgb(75, 192, 192)\",\n  blue: \"rgb(54, 162, 235)\",\n  purple: \"rgb(153, 102, 255)\",\n  grey: \"rgb(201, 203, 207)\"\n};\nconst color = Chart.helpers.color;\nconst data = {\n  datasets: [{\n    label: \"FIRE-AVAX\",\n    backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),\n    borderColor: chartColors.red,\n    fill: false,\n    lineTension: 0,\n    //   borderDash: [8, 4],\n    data: []\n  }]\n};\nconst options = {\n  elements: {\n    line: {\n      tension: 0.5\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"realtime\",\n      distribution: \"linear\",\n      realtime: {\n        // onRefresh: function (chart) {\n        //     chart.data.datasets[0].data.push({\n        //         x: moment(),\n        //         y: Math.random()\n        //     });\n        // },\n        delay: 1000,\n        time: {\n          displayFormat: \"\"\n        }\n      },\n      ticks: {\n        displayFormats: 1,\n        maxRotation: 0,\n        minRotation: 0,\n        stepSize: 10,\n        maxTicksLimit: 10,\n        minUnit: \"second\",\n        source: \"auto\",\n        autoSkip: true,\n        callback: function (value) {\n          return moment(value, \"HH:mm:ss\").format(\"mm:ss\");\n          return \"\";\n        }\n      }\n    }],\n    yAxes: [{\n      ticks: {\n        beginAtZero: true,\n        max: 3,\n        min: 0\n      }\n    }]\n  }\n};\n\nclass MyChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        datasets: [{\n          label: \"FIRE-AVAX\",\n          backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),\n          borderColor: chartColors.red,\n          fill: false,\n          lineTension: 0,\n          //   borderDash: [8, 4],\n          data: []\n        }]\n      },\n      options: {\n        elements: {\n          line: {\n            tension: 0.5\n          }\n        },\n        scales: {\n          xAxes: [{\n            type: \"realtime\",\n            distribution: \"linear\",\n            realtime: {\n              // onRefresh: function (chart) {\n              //     chart.data.datasets[0].data.push({\n              //         x: moment(),\n              //         y: state.temp\n              //     });\n              // },\n              delay: 1000,\n              time: {\n                displayFormat: \"\"\n              }\n            },\n            ticks: {\n              displayFormats: 1,\n              maxRotation: 0,\n              minRotation: 0,\n              stepSize: 10,\n              maxTicksLimit: 10,\n              minUnit: \"second\",\n              source: \"auto\",\n              autoSkip: true,\n              callback: function (value) {\n                return moment(value, \"HH:mm:ss\").format(\"mm:ss\");\n              }\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              max: 3,\n              min: 0\n            }\n          }]\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.props.disptch({\n        type: \"GET_FIRE_VALUE\"\n      });\n      this.state.data.datasets[0].data.push({\n        x: moment(),\n        y: this.props.fire_value\n      });\n    }, 2000);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: this.state.data,\n      options: this.state.options,\n      height: 200 // width={200}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    fire_value: state.fire_value\n  };\n};\n\nconst mapDispatchToProps = disptch => {\n  return {\n    disptch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyChart);","map":{"version":3,"sources":["D:/Work/Upwork/Luke,Eric,AvalancheDefi/Milestone3/Fire/MyPhoenix/Website/src/components/common/rt_chart.js"],"names":["React","Line","moment","connect","Chart","require","chartColors","red","orange","yellow","green","blue","purple","grey","color","helpers","data","datasets","label","backgroundColor","alpha","rgbString","borderColor","fill","lineTension","options","elements","line","tension","scales","xAxes","type","distribution","realtime","delay","time","displayFormat","ticks","displayFormats","maxRotation","minRotation","stepSize","maxTicksLimit","minUnit","source","autoSkip","callback","value","format","yAxes","beginAtZero","max","min","MyChart","Component","constructor","props","state","componentDidMount","setInterval","disptch","push","x","y","fire_value","render","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-streaming\";\r\nimport moment from \"moment\";\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nconst Chart = require(\"react-chartjs-2\").Chart;\r\n\r\nconst chartColors = {\r\n    red: \"rgb(255, 99, 132)\",\r\n    orange: \"rgb(255, 159, 64)\",\r\n    yellow: \"rgb(255, 205, 86)\",\r\n    green: \"rgb(75, 192, 192)\",\r\n    blue: \"rgb(54, 162, 235)\",\r\n    purple: \"rgb(153, 102, 255)\",\r\n    grey: \"rgb(201, 203, 207)\"\r\n};\r\n\r\nconst color = Chart.helpers.color;\r\nconst data = {\r\n    datasets: [\r\n        {\r\n            label: \"FIRE-AVAX\",\r\n            backgroundColor: color(chartColors.red)\r\n                .alpha(0.5)\r\n                .rgbString(),\r\n            borderColor: chartColors.red,\r\n            fill: false,\r\n            lineTension: 0,\r\n            //   borderDash: [8, 4],\r\n            data: []\r\n        }\r\n    ]\r\n};\r\n\r\nconst options = {\r\n    elements: {\r\n        line: {\r\n            tension: 0.5\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"realtime\",\r\n                distribution: \"linear\",\r\n                realtime: {\r\n                    // onRefresh: function (chart) {\r\n                    //     chart.data.datasets[0].data.push({\r\n                    //         x: moment(),\r\n                    //         y: Math.random()\r\n                    //     });\r\n                    // },\r\n                    delay: 1000,\r\n                    time: {\r\n                        displayFormat: \"\"\r\n                    }\r\n                },\r\n                ticks: {\r\n                    displayFormats: 1,\r\n                    maxRotation: 0,\r\n                    minRotation: 0,\r\n                    stepSize: 10,\r\n                    maxTicksLimit: 10,\r\n                    minUnit: \"second\",\r\n                    source: \"auto\",\r\n                    autoSkip: true,\r\n                    callback: function (value) {\r\n                        return moment(value, \"HH:mm:ss\").format(\"mm:ss\");\r\n                        return \"\";\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    max: 3,\r\n                    min: 0\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nclass MyChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                datasets: [\r\n                    {\r\n                        label: \"FIRE-AVAX\",\r\n                        backgroundColor: color(chartColors.red)\r\n                            .alpha(0.5)\r\n                            .rgbString(),\r\n                        borderColor: chartColors.red,\r\n                        fill: false,\r\n                        lineTension: 0,\r\n                        //   borderDash: [8, 4],\r\n                        data: []\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.5\r\n                    }\r\n                },\r\n                scales: {\r\n                    xAxes: [\r\n                        {\r\n                            type: \"realtime\",\r\n                            distribution: \"linear\",\r\n                            realtime: {\r\n                                // onRefresh: function (chart) {\r\n                                //     chart.data.datasets[0].data.push({\r\n                                //         x: moment(),\r\n                                //         y: state.temp\r\n                                //     });\r\n                                // },\r\n                                delay: 1000,\r\n                                time: {\r\n                                    displayFormat: \"\"\r\n                                }\r\n                            },\r\n                            ticks: {\r\n                                displayFormats: 1,\r\n                                maxRotation: 0,\r\n                                minRotation: 0,\r\n                                stepSize: 10,\r\n                                maxTicksLimit: 10,\r\n                                minUnit: \"second\",\r\n                                source: \"auto\",\r\n                                autoSkip: true,\r\n                                callback: function (value) {\r\n                                    return moment(value, \"HH:mm:ss\").format(\"mm:ss\");\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    yAxes: [\r\n                        {\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                max: 3,\r\n                                min: 0\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        setInterval(() => {\r\n            this.props.disptch({ type: \"GET_FIRE_VALUE\" });\r\n            this.state.data.datasets[0].data.push({\r\n                x: moment(),\r\n                y: this.props.fire_value\r\n            })\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Line data={this.state.data}\r\n                options={this.state.options}\r\n                height={200}\r\n            // width={200}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { fire_value: state.fire_value }\r\n}\r\n\r\nconst mapDispatchToProps = disptch => {\r\n    return { disptch };\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyChart);\r\n"]},"metadata":{},"sourceType":"module"}