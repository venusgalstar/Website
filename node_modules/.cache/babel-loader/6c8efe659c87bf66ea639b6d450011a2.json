{"ast":null,"code":"import { act } from 'react-dom/cjs/react-dom-test-utils.development';\nimport { createStore } from 'redux';\nimport Web3 from 'web3';\nimport config from '../contract/config';\nimport { toast } from 'react-toastify';\nconst _initialState = {\n  price_usd: 0,\n  price_bnb: 0,\n  account: \"\",\n  all_nodes: 0,\n  my_nodes: [],\n  my_nfts: []\n};\n\nconst init = init => {\n  return init;\n};\n\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\nconst web3 = new Web3(Web3.givenProvider || provider);\nconst tokenContract = new web3.eth.Contract(config.FireAbi, config.FireToken);\nconst nftContract = new web3.eth.Contract(config.NFTAbi, config.FireNFT);\nconst rewardConatract = new web3.eth.Contract(config.RewardAbi, config.Reward);\nconsole.log(\"reward Contract\", rewardConatract);\nconsole.log(\"nft Contract\", nftContract);\nconsole.log(\"token Contract\", tokenContract);\n\nconst reducer = (state = init(_initialState), action) => {\n  if (action.type === 'UPDATE_TOKEN_PRICE') {\n    return Object.assign({}, state, {\n      price_usd: action.payload.price_usd,\n      price_bnb: action.payload.price_bnb\n    });\n  } else if (action.type === \"UPDATE_CHAIN_ID\") {\n    return Object.assign({}, state, {\n      chainId: action.payload.chainId\n    });\n  } else if (action.type === 'CONNECT_WALLET') {\n    if (state.chainId == undefined || state.chainId != 3) {\n      toast.info(\"Change network to Ropsten Testnet!\", {\n        position: \"top-center\",\n        autoClose: 3000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n\n    web3.eth.getAccounts((err, accounts) => {\n      store.dispatch({\n        type: \"GET_USER_INFO\",\n        payload: {\n          account: accounts[0]\n        }\n      });\n    });\n  } else if (action.type === 'SET_CONTRACT_STATUS') {\n    console.log(\"state in redux\", state);\n  } else if (action.type === \"SET_NFT_URL\") {\n    if (action.payload.type === \"master\") {\n      nftContract.methods.setMasterNFTURI(action.payload.url).send({\n        from: state.account\n      }).then(() => console.log).catch(() => console.log);\n    } else if (action.payload.type === \"grand\") {\n      nftContract.methods.setGrandNFTURI(action.payload.url).send({\n        from: state.account\n      }).then(() => console.log).catch(() => console.log);\n    }\n  } else if (action.type === \"CLAIM_NODE\") {\n    rewardConatract.methods.getClaimFee().call().then(claimFee => {\n      if (action.payload.node_id != -1) {\n        rewardConatract.methods.claimByNode(action.payload.node_id).send({\n          from: state.account,\n          value: claimFee,\n          gas: 210000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      } else if (action.payload.node_id == -1) {\n        rewardConatract.methods.claimAll().send({\n          from: state.account,\n          value: claimFee,\n          gas: 210000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      }\n    }).catch(() => console.log);\n  } else if (action.type === \"BUY_NFT_ART\") {\n    if (action.payload.type == \"master\") {\n      rewardConatract.methods.getMasterNFTPrice().call().then(price => {\n        rewardConatract.methods.buyNFT(0, 1).send({\n          from: state.account,\n          value: price,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      });\n    } else if (action.payload.type == \"grand\") {\n      rewardConatract.methods.getGrandNFTPrice().call().then(price => {\n        rewardConatract.methods.buyNFT(1, 1).send({\n          from: state.account,\n          value: price,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      });\n    }\n  } else if (action.type === \"PAY_NODE_FEE\") {\n    rewardConatract.methods.getNodeMaintenanceFee().call().then(threeFee => {\n      rewardConatract.methods.payNodeFee(Number(action.payload.node_id), 0).send({\n        from: state.account,\n        value: threeFee,\n        gas: 2100000\n      }).then(() => {\n        store.dispatch({\n          type: \"GET_USER_INFO\"\n        });\n      }).catch(() => console.log);\n    });\n  } else if (action.type === \"CREATE_NODE\") {\n    const promise = [];\n    promise.push(rewardConatract.methods.getNodePrice().call());\n    promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\n    Promise.all(promise).then(result => {\n      tokenContract.methods.approve(config.Reward, result[0]).send({\n        from: state.account,\n        gas: 210000\n      }).then(ret => {\n        rewardConatract.methods.buyNode(1).send({\n          from: state.account,\n          value: result[1],\n          gas: 2100000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\"\n          });\n        });\n      }).catch(ret => {\n        console.log(\"err\", ret);\n      });\n    });\n  } else if (action.type === \"GET_USER_INFO\") {\n    let account = action.payload && action.payload.account ? action.payload.account : state.account;\n    let promise = [];\n    promise.push(rewardConatract.methods.getNFTList(account).call());\n    promise.push(rewardConatract.methods.getNodeList(account).call());\n    promise.push(rewardConatract.methods.getRewardAmount(account).call());\n    Promise.all(promise).then(result => {\n      const nodes = [];\n\n      for (var index in result[1]) {\n        nodes.push({\n          createTime: result[1][index].createTime,\n          lastTime: result[1][index].lastTime,\n          grandNFT: result[2].curGrandNFTEnable[index],\n          masterNFT: result[2].curMasterNFTEnable[index],\n          reward: Number(web3.utils.fromWei(result[2].nodeRewards[index]))\n        });\n      }\n\n      store.dispatch({\n        type: \"RETURN_DATA\",\n        payload: {\n          my_nfts: result[0],\n          my_nodes: nodes,\n          account: account,\n          reward: result[2]\n        }\n      });\n    });\n  } else if (action.type === \"UPDATE_ALL_REWARD\") {\n    return Object.assign({}, state, {\n      cur_all_reward: action.payload.cur_all_reward\n    });\n  } else if (action.type === \"RETURN_DATA\") {\n    return Object.assign({}, state, action.payload);\n  }\n\n  return state;\n}; // const checkNetwork = (chainId) => {\n//     if (chainId == undefined || chainId != 3) {\n//         toast.info(\"Change network to Ropsten Testnet!\", {\n//             position: \"top-center\",\n//             autoClose: 3000,\n//             hideProgressBar: true,\n//             closeOnClick: true,\n//             pauseOnHover: true,\n//             draggable: true,\n//             progress: undefined,\n//         });\n//     }\n// }\n\n\nconst store = createStore(reducer);\n\nif (window.ethereum) {\n  window.ethereum.on('accountsChanged', function (accounts) {\n    store.dispatch({\n      type: \"GET_USER_INFO\",\n      payload: {\n        account: accounts[0]\n      }\n    });\n  });\n  window.ethereum.on('chainChanged', function (networkId) {\n    console.log(\"chain id\", networkId);\n    store.dispatch({\n      type: \"UPDATE_CHAIN_ID\",\n      payload: {\n        chainId: networkId\n      }\n    });\n  });\n  web3.eth.net.getId().then(chainId => {\n    store.dispatch({\n      type: \"UPDATE_CHAIN_ID\",\n      payload: {\n        chainId: chainId\n      }\n    });\n  });\n}\n\nexport default store;","map":{"version":3,"sources":["D:/Work/Upwork/Luke,Eric,AvalancheDefi/Milestone3/Fire/Phoenix/src/store/index.js"],"names":["act","createStore","Web3","config","toast","_initialState","price_usd","price_bnb","account","all_nodes","my_nodes","my_nfts","init","provider","providers","HttpProvider","testNetUrl","web3","givenProvider","tokenContract","eth","Contract","FireAbi","FireToken","nftContract","NFTAbi","FireNFT","rewardConatract","RewardAbi","Reward","console","log","reducer","state","action","type","Object","assign","payload","chainId","undefined","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","getAccounts","err","accounts","store","dispatch","methods","setMasterNFTURI","url","send","from","then","catch","setGrandNFTURI","getClaimFee","call","claimFee","node_id","claimByNode","value","gas","claimAll","getMasterNFTPrice","price","buyNFT","getGrandNFTPrice","getNodeMaintenanceFee","threeFee","payNodeFee","Number","promise","push","getNodePrice","Promise","all","result","approve","ret","buyNode","getNFTList","getNodeList","getRewardAmount","nodes","index","createTime","lastTime","grandNFT","curGrandNFTEnable","masterNFT","curMasterNFTEnable","reward","utils","fromWei","nodeRewards","cur_all_reward","window","ethereum","on","networkId","net","getId"],"mappings":"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","sourcesContent":["import { act } from 'react-dom/cjs/react-dom-test-utils.development';\r\nimport { createStore } from 'redux'\r\nimport Web3 from 'web3';\r\nimport config from '../contract/config';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\n\r\nconst _initialState = {\r\n    price_usd: 0,\r\n    price_bnb: 0,\r\n    account: \"\",\r\n    all_nodes: 0,\r\n    my_nodes: [],\r\n    my_nfts: []\r\n}\r\n\r\n\r\nconst init = (init) => {\r\n\r\n    return init;\r\n}\r\n\r\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\r\nconst web3 = new Web3(Web3.givenProvider || provider);\r\n\r\n\r\n\r\n\r\nconst tokenContract = new web3.eth.Contract(config.FireAbi, config.FireToken);\r\nconst nftContract = new web3.eth.Contract(config.NFTAbi, config.FireNFT);\r\nconst rewardConatract = new web3.eth.Contract(config.RewardAbi, config.Reward);\r\n\r\nconsole.log(\"reward Contract\", rewardConatract);\r\nconsole.log(\"nft Contract\", nftContract);\r\nconsole.log(\"token Contract\", tokenContract);\r\n\r\n\r\n\r\n\r\nconst reducer = (state = init(_initialState), action) => {\r\n\r\n    if (action.type === 'UPDATE_TOKEN_PRICE') {\r\n        return Object.assign({}, state, {\r\n            price_usd: action.payload.price_usd,\r\n            price_bnb: action.payload.price_bnb\r\n        })\r\n    } else if (action.type === \"UPDATE_CHAIN_ID\") {\r\n        return Object.assign({}, state, {\r\n            chainId: action.payload.chainId\r\n        });\r\n    } else if (action.type === 'CONNECT_WALLET') {\r\n        if (state.chainId == undefined || state.chainId != 3) {\r\n            toast.info(\"Change network to Ropsten Testnet!\", {\r\n                position: \"top-center\",\r\n                autoClose: 3000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n        web3.eth.getAccounts((err, accounts) => {\r\n            store.dispatch({\r\n                type: \"GET_USER_INFO\",\r\n                payload: { account: accounts[0] }\r\n            });\r\n        })\r\n    } else if (action.type === 'SET_CONTRACT_STATUS') {\r\n        console.log(\"state in redux\", state);\r\n\r\n    } else if (action.type === \"SET_NFT_URL\") {\r\n        if (action.payload.type === \"master\") {\r\n            nftContract.methods.setMasterNFTURI(action.payload.url).send({ from: state.account }).then(() => console.log).catch(() => console.log);\r\n        } else if (action.payload.type === \"grand\") {\r\n            nftContract.methods.setGrandNFTURI(action.payload.url).send({ from: state.account }).then(() => console.log).catch(() => console.log);\r\n        }\r\n    } else if (action.type === \"CLAIM_NODE\") {\r\n\r\n        rewardConatract.methods.getClaimFee().call()\r\n            .then((claimFee) => {\r\n\r\n                if (action.payload.node_id != -1) {\r\n\r\n                    rewardConatract.methods.claimByNode(action.payload.node_id)\r\n                        .send({ from: state.account, value: claimFee, gas: 210000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                } else if (action.payload.node_id == -1) {\r\n                    rewardConatract.methods.claimAll()\r\n                        .send({ from: state.account, value: claimFee, gas: 210000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                }\r\n            })\r\n            .catch(() => console.log)\r\n\r\n\r\n    } else if (action.type === \"BUY_NFT_ART\") {\r\n        if (action.payload.type == \"master\") {\r\n            rewardConatract.methods.getMasterNFTPrice().call()\r\n                .then((price) => {\r\n                    rewardConatract.methods.buyNFT(0, 1)\r\n                        .send({ from: state.account, value: price, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                })\r\n        } else if (action.payload.type == \"grand\") {\r\n            rewardConatract.methods.getGrandNFTPrice().call()\r\n                .then((price) => {\r\n                    rewardConatract.methods.buyNFT(1, 1)\r\n                        .send({ from: state.account, value: price, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\" });\r\n                        })\r\n                })\r\n        }\r\n\r\n    } else if (action.type === \"PAY_NODE_FEE\") {\r\n\r\n        rewardConatract.methods.getNodeMaintenanceFee().call()\r\n            .then((threeFee) => {\r\n                rewardConatract.methods.payNodeFee(Number(action.payload.node_id), 0)\r\n                    .send({ from: state.account, value: threeFee, gas: 2100000 })\r\n                    .then(() => {\r\n                        store.dispatch({ type: \"GET_USER_INFO\" });\r\n                    }).catch(() =>\r\n                        console.log\r\n                    )\r\n            })\r\n    } else if (action.type === \"CREATE_NODE\") {\r\n        const promise = [];\r\n        promise.push(rewardConatract.methods.getNodePrice().call());\r\n        promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\r\n        Promise.all(promise).then((result) => {\r\n            tokenContract.methods.approve(config.Reward, result[0]).send({ from: state.account, gas: 210000 }).then((ret) => {\r\n                rewardConatract.methods.buyNode(1).send({ from: state.account, value: result[1], gas: 2100000 })\r\n                    .then(() => {\r\n                        store.dispatch({ type: \"GET_USER_INFO\" });\r\n                    });\r\n            }).catch((ret) => { console.log(\"err\", ret) });\r\n        });\r\n\r\n    } else if (action.type === \"GET_USER_INFO\") {\r\n\r\n        let account = (action.payload && action.payload.account) ? action.payload.account : state.account;\r\n        let promise = [];\r\n        promise.push(rewardConatract.methods.getNFTList(account).call());\r\n        promise.push(rewardConatract.methods.getNodeList(account).call());\r\n        promise.push(rewardConatract.methods.getRewardAmount(account).call());\r\n        Promise.all(promise).then((result) => {\r\n            const nodes = [];\r\n            for (var index in result[1]) {\r\n                nodes.push({\r\n                    createTime: result[1][index].createTime,\r\n                    lastTime: result[1][index].lastTime,\r\n                    grandNFT: result[2].curGrandNFTEnable[index],\r\n                    masterNFT: result[2].curMasterNFTEnable[index],\r\n                    reward: Number(web3.utils.fromWei(result[2].nodeRewards[index]))\r\n                });\r\n            }\r\n\r\n            store.dispatch({\r\n                type: \"RETURN_DATA\", payload:\r\n                {\r\n                    my_nfts: result[0],\r\n                    my_nodes: nodes,\r\n                    account: account,\r\n                    reward: result[2]\r\n                }\r\n            });\r\n        });\r\n\r\n    } else if (action.type === \"UPDATE_ALL_REWARD\") {\r\n        return Object.assign({}, state, {\r\n            cur_all_reward: action.payload.cur_all_reward\r\n        });\r\n    } else if (action.type === \"RETURN_DATA\") {\r\n        return Object.assign({}, state, action.payload);\r\n    }\r\n    return state;\r\n}\r\n\r\n// const checkNetwork = (chainId) => {\r\n//     if (chainId == undefined || chainId != 3) {\r\n//         toast.info(\"Change network to Ropsten Testnet!\", {\r\n//             position: \"top-center\",\r\n//             autoClose: 3000,\r\n//             hideProgressBar: true,\r\n//             closeOnClick: true,\r\n//             pauseOnHover: true,\r\n//             draggable: true,\r\n//             progress: undefined,\r\n//         });\r\n//     }\r\n// }\r\n\r\nconst store = createStore(reducer);\r\nif (window.ethereum) {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n        store.dispatch({\r\n            type: \"GET_USER_INFO\",\r\n            payload: { account: accounts[0] }\r\n        });\r\n    })\r\n    window.ethereum.on('chainChanged', function (networkId) {\r\n        console.log(\"chain id\", networkId);\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: networkId }\r\n        });\r\n    });\r\n    web3.eth.net.getId().then((chainId) => {\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: chainId }\r\n        });\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}