{"ast":null,"code":"import{createStore}from'redux';import Web3 from'web3';import config from'../contract/config';var _initialState={price_usd:0,price_bnb:0,account:\"\",node_list:[]};var init=function init(_init){return _init;};var provider=Web3.providers.HttpProvider(config.testNetUrl);var web3=new Web3(Web3.givenProvider||provider);var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:init(_initialState);var action=arguments.length>1?arguments[1]:undefined;if(action.type==='UPDATE_TOKEN_PRICE'){return Object.assign({},state,{price_usd:action.payload.price_usd,price_bnb:action.payload.price_bnb});}else if(action.type===\"UPDATE_WALLET_ACCOUNT\"){console.log(\"accounts updated\");return Object.assign({},state,{account:action.payload.account});}else if(action.type===\"UPDATE_CHAIN_ID\"){return Object.assign({},state,{chainId:action.payload.chainId});}else if(action.type==='GET_NODE_LIST'){var list=[];for(var i=0;i<100;i++){list.push({id:i,content:i,rewards:i});}return Object.assign({},state,{node_list:list});}else if(action.type==='CONNECT_WALLET'){web3.eth.getAccounts(function(err,accounts){store.dispatch({type:\"UPDATE_WALLET_ACCOUNT\",payload:{account:accounts[0]}});});}else if(action.type==='SET_CONTRACT_STATUS'){console.log(\"state in redux\",state);}else if(action.type===\"SET_NFT_URL\"){if(action.payload.type===\"master\"){}else if(action.payload.type===\"grand\"){}}return state;};var store=createStore(reducer);if(window.ethereum){window.ethereum.on('accountsChanged',function(accounts){store.dispatch({type:\"UPDATE_WALLET_ACCOUNT\",payload:{account:accounts[0]}});});window.ethereum.on('chainChanged',function(networkId){store.dispatch({type:\"UPDATE_CHAIN_ID\",payload:{chainId:networkId}});});}export default store;","map":{"version":3,"sources":["D:/Work/Upwork/Luke,Eric,AvalancheDefi/Milestone3/Fire/Phoenix/src/store/index.js"],"names":["createStore","Web3","config","_initialState","price_usd","price_bnb","account","node_list","init","provider","providers","HttpProvider","testNetUrl","web3","givenProvider","reducer","state","action","type","Object","assign","payload","console","log","chainId","list","i","push","id","content","rewards","eth","getAccounts","err","accounts","store","dispatch","window","ethereum","on","networkId"],"mappings":"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","sourcesContent":["import { createStore } from 'redux'\r\nimport Web3 from 'web3';\r\nimport config from '../contract/config';\r\n\r\nconst _initialState = {\r\n    price_usd: 0,\r\n    price_bnb: 0,\r\n    account: \"\",\r\n    node_list: []\r\n}\r\n\r\n\r\nconst init = (init) => {\r\n\r\n    return init;\r\n}\r\n\r\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\r\nconst web3 = new Web3(Web3.givenProvider || provider);\r\n\r\n\r\nconst reducer = (state = init(_initialState), action) => {\r\n\r\n    if (action.type === 'UPDATE_TOKEN_PRICE') {\r\n        return Object.assign({}, state, {\r\n            price_usd: action.payload.price_usd,\r\n            price_bnb: action.payload.price_bnb\r\n        })\r\n    } else if (action.type === \"UPDATE_WALLET_ACCOUNT\") {\r\n        console.log(\"accounts updated\");\r\n        return Object.assign({}, state, {\r\n            account: action.payload.account\r\n        });\r\n    } else if (action.type === \"UPDATE_CHAIN_ID\") {\r\n        return Object.assign({}, state, {\r\n            chainId: action.payload.chainId\r\n        });\r\n    } else if (action.type === 'GET_NODE_LIST') {\r\n        var list = [];\r\n        for (var i = 0; i < 100; i++) {\r\n            list.push({ id: i, content: i, rewards: i });\r\n        }\r\n        return Object.assign({}, state, {\r\n            node_list: list\r\n        });\r\n    } else if (action.type === 'CONNECT_WALLET') {\r\n        web3.eth.getAccounts((err, accounts) => {\r\n            store.dispatch({\r\n                type: \"UPDATE_WALLET_ACCOUNT\",\r\n                payload: { account: accounts[0] }\r\n            });\r\n        })\r\n    } else if (action.type === 'SET_CONTRACT_STATUS') {\r\n        console.log(\"state in redux\", state);\r\n\r\n\r\n\r\n\r\n    } else if (action.type === \"SET_NFT_URL\" ) {\r\n        if (action.payload.type === \"master\") {\r\n\r\n        } else if (action.payload.type === \"grand\") {\r\n\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\nif (window.ethereum) {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n\r\n        store.dispatch({\r\n            type: \"UPDATE_WALLET_ACCOUNT\",\r\n            payload: { account: accounts[0] }\r\n        });\r\n    })\r\n\r\n    window.ethereum.on('chainChanged', function (networkId) {\r\n\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: networkId }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}