{"ast":null,"code":"import { createStore } from 'redux';\nimport Web3 from 'web3';\nimport config from '../contract/config';\nimport { toast } from 'react-toastify';\nconst _initialState = {\n  price_usd: 0,\n  price_bnb: 0,\n  account: \"\",\n  all_nodes: 0,\n  my_nodes: [],\n  my_nfts: [],\n  grand_nft_url: \"\",\n  master_nft_url: \"\",\n  currentTime: 0,\n  contract_status: 0,\n  chainId: 0,\n  can_perform: true,\n  fire_value: 0\n};\n\nconst init = init => {\n  return init;\n};\n\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\nconst web3 = new Web3(Web3.givenProvider || provider);\nconst tokenContract = new web3.eth.Contract(config.FireAbi, config.FireToken);\nconst nftContract = new web3.eth.Contract(config.NFTAbi, config.FireNFT);\nconst rewardConatract = new web3.eth.Contract(config.RewardAbi, config.Reward);\n\nconst reducer = (state = init(_initialState), action) => {\n  if (action.type === 'UPDATE_TOKEN_PRICE') {\n    return Object.assign({}, state, {\n      price_usd: action.payload.price_usd,\n      price_bnb: action.payload.price_bnb\n    });\n  } else if (action.type === \"UPDATE_CHAIN_ID\") {\n    return Object.assign({}, state, {\n      chainId: action.payload.chainId\n    });\n  } else if (action.type === 'CONNECT_WALLET') {\n    checkNetwork(state.chainId);\n    web3.eth.getAccounts((err, accounts) => {\n      store.dispatch({\n        type: \"GET_USER_INFO\",\n        payload: {\n          account: accounts[0]\n        }\n      });\n    });\n  } else if (action.type === 'SET_CONTRACT_STATUS') {\n    if (!state.account) {\n      connectAlert();\n      return state;\n    }\n\n    rewardConatract.methods.setContractStatus(action.payload.param).send({\n      from: state.account\n    }).then(() => {\n      updateGlobalInfo();\n    }).catch(() => console.log);\n  } else if (action.type === \"SET_NFT_URL\") {\n    if (!state.account) {\n      connectAlert();\n      return state;\n    }\n\n    if (action.payload.type === \"master\") {\n      nftContract.methods.setMasterNFTURI(action.payload.url).send({\n        from: state.account\n      }).then(() => console.log).catch(() => console.log);\n    } else if (action.payload.type === \"grand\") {\n      nftContract.methods.setGrandNFTURI(action.payload.url).send({\n        from: state.account\n      }).then(() => console.log).catch(() => console.log);\n    }\n  } else if (action.type === \"CLAIM_NODE\") {\n    if (!state.account) {\n      connectAlert();\n      return Object.assign({}, state, {\n        can_perform: true\n      });\n    }\n\n    rewardConatract.methods.getClaimFee().call().then(function (claimFee) {\n      if (action.payload.node_id !== -1) {\n        rewardConatract.methods.claimByNode(action.payload.node_id).send({\n          from: state.account,\n          value: claimFee,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\",\n            payload: {\n              can_perform: true\n            }\n          });\n        }).catch(() => {\n          store.dispatch({\n            type: \"UPDATE_CAN_PERFORM_STATUS\",\n            payload: {\n              can_perform: true\n            }\n          });\n        });\n      } else if (action.payload.node_id === -1) {\n        rewardConatract.methods.claimAll().send({\n          from: state.account,\n          value: claimFee * action.payload.cnt,\n          gas: 1200000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\",\n            payload: {\n              can_perform: true\n            }\n          });\n        }).catch(() => {\n          store.dispatch({\n            type: \"UPDATE_CAN_PERFORM_STATUS\",\n            payload: {\n              can_perform: true\n            }\n          });\n        });\n      }\n    }).catch(() => {\n      store.dispatch({\n        type: \"UPDATE_CAN_PERFORM_STATUS\",\n        payload: {\n          can_perform: true\n        }\n      });\n    });\n  } else if (action.type === \"BUY_NFT_ART\") {\n    if (!state.account) {\n      connectAlert();\n      return Object.assign({}, state, {\n        can_perform: true\n      });\n    }\n\n    if (action.payload.type === \"master\") {\n      rewardConatract.methods.getMasterNFTPrice().call().then(price => {\n        rewardConatract.methods.buyNFT(0, 1).send({\n          from: state.account,\n          value: price,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\",\n            payload: {\n              can_perform: true\n            }\n          });\n        }).catch(() => {\n          store.dispatch({\n            type: \"UPDATE_CAN_PERFORM_STATUS\",\n            payload: {\n              can_perform: true\n            }\n          });\n        });\n      }).catch(() => {\n        store.dispatch({\n          type: \"UPDATE_CAN_PERFORM_STATUS\",\n          payload: {\n            can_perform: true\n          }\n        });\n      });\n    } else if (action.payload.type === \"grand\") {\n      rewardConatract.methods.getGrandNFTPrice().call().then(price => {\n        rewardConatract.methods.buyNFT(1, 1).send({\n          from: state.account,\n          value: price,\n          gas: 400000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\",\n            payload: {\n              can_perform: true\n            }\n          });\n        }).catch(() => {\n          store.dispatch({\n            type: \"UPDATE_CAN_PERFORM_STATUS\",\n            payload: {\n              can_perform: true\n            }\n          });\n        });\n      }).catch(() => {\n        store.dispatch({\n          type: \"UPDATE_CAN_PERFORM_STATUS\",\n          payload: {\n            can_perform: true\n          }\n        });\n      });\n    }\n  } else if (action.type === \"PAY_NODE_FEE\") {\n    rewardConatract.methods.getNodeMaintenanceFee().call().then(threeFee => {\n      rewardConatract.methods.payNodeFee(Number(action.payload.node_id), action.payload.duration - 1).send({\n        from: state.account,\n        value: action.payload.duration * threeFee,\n        gas: 2100000\n      }).then(() => {\n        store.dispatch({\n          type: \"GET_USER_INFO\",\n          payload: {\n            can_perform: true\n          }\n        });\n      }).catch(() => {\n        store.dispatch({\n          type: \"UPDATE_CAN_PERFORM_STATUS\",\n          payload: {\n            can_perform: true\n          }\n        });\n      });\n    }).catch(() => {\n      store.dispatch({\n        type: \"UPDATE_CAN_PERFORM_STATUS\",\n        payload: {\n          can_perform: true\n        }\n      });\n    });\n  } else if (action.type === \"CREATE_NODE\") {\n    if (!state.account) {\n      connectAlert();\n      return Object.assign({}, state, {\n        can_perform: true\n      });\n    }\n\n    const promise = [];\n    promise.push(rewardConatract.methods.getNodePrice().call());\n    promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\n    Promise.all(promise).then(result => {\n      tokenContract.methods.approve(config.Reward, result[0]).send({\n        from: state.account,\n        gas: 210000\n      }).then(ret => {\n        rewardConatract.methods.buyNode(1).send({\n          from: state.account,\n          value: result[1],\n          gas: 2100000\n        }).then(() => {\n          store.dispatch({\n            type: \"GET_USER_INFO\",\n            payload: {\n              can_perform: true\n            }\n          });\n        }).catch(() => {\n          store.dispatch({\n            type: \"UPDATE_CAN_PERFORM_STATUS\",\n            payload: {\n              can_perform: true\n            }\n          });\n        });\n      }).catch(ret => {\n        store.dispatch({\n          type: \"UPDATE_CAN_PERFORM_STATUS\",\n          payload: {\n            can_perform: true\n          }\n        });\n      });\n    }).catch(() => {\n      store.dispatch({\n        type: \"UPDATE_CAN_PERFORM_STATUS\",\n        payload: {\n          can_perform: true\n        }\n      });\n    });\n  } else if (action.type === \"GET_USER_INFO\") {\n    let account = action.payload && action.payload.account ? action.payload.account : state.account;\n    let can_perform = action.payload && action.payload.can_perform ? action.payload.can_perform : state.can_perform;\n    let promise = [];\n    promise.push(rewardConatract.methods.getNFTList(account).call());\n    promise.push(rewardConatract.methods.getNodeList(account).call());\n    promise.push(rewardConatract.methods.getRewardAmount(account).call());\n    promise.push(nftContract.methods.getMasterNFTURI().call());\n    promise.push(nftContract.methods.getGrandNFTURI().call());\n    promise.push(rewardConatract.methods.getTotalNodeCount().call());\n    Promise.all(promise).then(result => {\n      const nodes = [];\n\n      for (var index in result[1]) {\n        nodes.push({\n          createTime: result[1][index].createTime,\n          lastTime: result[1][index].lastTime,\n          grandNFT: result[2].curGrandNFTEnable[index],\n          masterNFT: result[2].curMasterNFTEnable[index],\n          reward: Number(web3.utils.fromWei(result[2].nodeRewards[index])).toFixed(9)\n        });\n      }\n\n      store.dispatch({\n        type: \"RETURN_DATA\",\n        payload: {\n          my_nfts: result[0],\n          my_nodes: nodes,\n          account: account,\n          reward: result[2],\n          master_nft_url: result[3],\n          grand_nft_url: result[4],\n          currentTime: result[2].currentTime * 1,\n          all_nodes: result[5],\n          can_perform: can_perform\n        }\n      });\n    });\n  } else if (action.type === \"CHANGE_REWARD_OWNER\") {// uploadData(data1);\n  } else if (action.type === 'PAY_FEE_ALL') {\n    if (!state.account) {\n      connectAlert();\n      return Object.assign({}, state, {\n        can_perform: true\n      });\n    }\n\n    rewardConatract.methods.getNodeMaintenanceFee().call().then(threeFee => {\n      rewardConatract.methods.payAllNodeFee(action.payload.duration - 1).send({\n        from: state.account,\n        value: action.payload.duration * threeFee * 100,\n        gas: 2100000\n      }).then(() => {\n        store.dispatch({\n          type: \"GET_USER_INFO\",\n          payload: {\n            can_perform: true\n          }\n        });\n      }).catch(() => {\n        store.dispatch({\n          type: \"UPDATE_CAN_PERFORM_STATUS\",\n          payload: {\n            can_perform: true\n          }\n        });\n      });\n    }).catch(err => {\n      store.dispatch({\n        type: \"UPDATE_CAN_PERFORM_STATUS\",\n        payload: {\n          can_perform: true\n        }\n      });\n    });\n  } else if (action.type === \"SET_PRICE_VALUE\") {\n    if (!state.account) {\n      connectAlert();\n      return Object.assign({}, state, {\n        can_perform: true\n      });\n    }\n\n    if (action.payload.type === \"claim_fee\") {\n      rewardConatract.methods.setClaimFee(web3.utils.toWei(action.payload.value, 'ether')).send({\n        from: state.account,\n        gas: 210000\n      }).then(() => {}).catch(() => {});\n    } else if (action.payload.type === \"maintenance_fee\") {\n      rewardConatract.methods.setNodeMaintenanceFee(web3.utils.toWei(action.payload.value, 'ether')).send({\n        from: state.account,\n        gas: 210000\n      }).then(() => {}).catch(() => {});\n    } else if (action.payload.type === \"nest_price\") {\n      rewardConatract.methods.setNodePrice(web3.utils.toWei(action.payload.value, 'ether')).send({\n        from: state.account,\n        gas: 210000\n      }).then(() => {}).catch(() => {});\n    } else if (action.payload.type === \"fire_price\") {\n      rewardConatract.methods.setFireValue(web3.utils.toWei(action.payload.value, 'ether')).send({\n        from: state.account,\n        gas: 210000\n      }).then(() => {}).catch(() => {});\n    }\n\n    let promise = [];\n    promise.push(rewardConatract.methods.getClaimFee().call());\n    promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\n    promise.push(rewardConatract.methods.getNodePrice().call());\n    promise.push(rewardConatract.methods.getFireValue().call());\n    Promise.all(promise).then(result => {\n      store.dispatch({\n        type: \"RETURN_DATA\",\n        payload: {\n          claim_fee: web3.utils.fromWei(result[0], 'ether'),\n          maintenance_fee: web3.utils.fromWei(result[1], 'ether'),\n          nest_price: web3.utils.fromWei(result[2], 'ether'),\n          fire_price: web3.utils.fromWei(result[3], 'ether')\n        }\n      });\n    }); // store.dispatch({type:\"GET_ADMIN_PRICE\"});\n  } else if (action.type === \"RETURN_DATA\") {\n    return Object.assign({}, state, action.payload);\n  } else if (action.type === \"UPDATE_CAN_PERFORM_STATUS\") {\n    return Object.assign({}, state, {\n      can_perform: action.payload.can_perform\n    });\n  } else if (action.type === \"GET_ADMIN_PRICE\") {\n    let promise = [];\n    promise.push(rewardConatract.methods.getClaimFee().call());\n    promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\n    promise.push(rewardConatract.methods.getNodePrice().call());\n    promise.push(rewardConatract.methods.getFireValue().call());\n    Promise.all(promise).then(result => {\n      store.dispatch({\n        type: \"RETURN_DATA\",\n        payload: {\n          claim_fee: web3.utils.fromWei(result[0], 'ether'),\n          maintenance_fee: web3.utils.fromWei(result[1], 'ether'),\n          nest_price: web3.utils.fromWei(result[2], 'ether'),\n          fire_price: web3.utils.fromWei(result[3], 'ether')\n        }\n      });\n    });\n  } else if (action.type === \"GET_FIRE_VALUE\") {\n    rewardConatract.methods.getAvaxForFire(1).call().then(value => {\n      return store.dispatch({\n        type: \"RETURN_DATA\",\n        payload: {\n          fire_value: value\n        }\n      });\n    });\n  }\n\n  return state;\n};\n\nconst connectAlert = () => {\n  toast.info(\"Please connect your wallet!\", {\n    position: \"top-center\",\n    autoClose: 3000,\n    hideProgressBar: true,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined\n  });\n};\n\nconst checkNetwork = chainId => {\n  if (web3.utils.toHex(chainId) !== web3.utils.toHex(config.chainId)) {\n    toast.info(\"Change network to Avalanche C Chain!\", {\n      position: \"top-center\",\n      autoClose: 3000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  }\n};\n\nconst updateGlobalInfo = () => {\n  let promise = [];\n  promise.push(nftContract.methods.getMasterNFTURI().call());\n  promise.push(nftContract.methods.getGrandNFTURI().call());\n  promise.push(rewardConatract.methods.getTotalNodeCount().call());\n  promise.push(rewardConatract.methods.getContractStatus().call());\n  promise.push(rewardConatract.methods.getAvaxForFire(1).call());\n  promise.push(rewardConatract.methods.getAvaxForUSD(1000000).call());\n  promise.push(tokenContract.methods.balanceOf(config.treasuryAddr).call());\n  Promise.all(promise).then(result => {\n    store.dispatch({\n      type: \"RETURN_DATA\",\n      payload: {\n        master_nft_url: result[0],\n        grand_nft_url: result[1],\n        all_nodes: result[2],\n        contract_status: result[3],\n        treasury_balance: Number(web3.utils.fromWei(result[6], 'ether') * result[4] / web3.utils.fromWei(result[5], 'ether')).toFixed(2)\n      }\n    });\n  });\n};\n\nconst store = createStore(reducer);\n\nif (window.ethereum) {\n  window.ethereum.on('accountsChanged', function (accounts) {\n    store.dispatch({\n      type: \"GET_USER_INFO\",\n      payload: {\n        account: accounts[0]\n      }\n    });\n  });\n  window.ethereum.on('chainChanged', function (chainId) {\n    checkNetwork(chainId);\n    store.dispatch({\n      type: \"UPDATE_CHAIN_ID\",\n      payload: {\n        chainId: chainId\n      }\n    });\n  });\n  web3.eth.getChainId().then(chainId => {\n    checkNetwork(chainId);\n    store.dispatch({\n      type: \"UPDATE_CHAIN_ID\",\n      payload: {\n        chainId: chainId\n      }\n    });\n  });\n  updateGlobalInfo();\n}\n\nexport default store;","map":{"version":3,"sources":["D:/Work/Upwork/Luke,Eric,AvalancheDefi/Milestone3/Fire/MyPhoenix/Website/src/store/index.js"],"names":["createStore","Web3","config","toast","_initialState","price_usd","price_bnb","account","all_nodes","my_nodes","my_nfts","grand_nft_url","master_nft_url","currentTime","contract_status","chainId","can_perform","fire_value","init","provider","providers","HttpProvider","testNetUrl","web3","givenProvider","tokenContract","eth","Contract","FireAbi","FireToken","nftContract","NFTAbi","FireNFT","rewardConatract","RewardAbi","Reward","reducer","state","action","type","Object","assign","payload","checkNetwork","getAccounts","err","accounts","store","dispatch","connectAlert","methods","setContractStatus","param","send","from","then","updateGlobalInfo","catch","console","log","setMasterNFTURI","url","setGrandNFTURI","getClaimFee","call","claimFee","node_id","claimByNode","value","gas","claimAll","cnt","getMasterNFTPrice","price","buyNFT","getGrandNFTPrice","getNodeMaintenanceFee","threeFee","payNodeFee","Number","duration","promise","push","getNodePrice","Promise","all","result","approve","ret","buyNode","getNFTList","getNodeList","getRewardAmount","getMasterNFTURI","getGrandNFTURI","getTotalNodeCount","nodes","index","createTime","lastTime","grandNFT","curGrandNFTEnable","masterNFT","curMasterNFTEnable","reward","utils","fromWei","nodeRewards","toFixed","payAllNodeFee","setClaimFee","toWei","setNodeMaintenanceFee","setNodePrice","setFireValue","getFireValue","claim_fee","maintenance_fee","nest_price","fire_price","getAvaxForFire","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","toHex","getContractStatus","getAvaxForUSD","balanceOf","treasuryAddr","treasury_balance","window","ethereum","on","getChainId"],"mappings":"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","sourcesContent":["import { createStore } from 'redux'\r\nimport Web3 from 'web3';\r\nimport config from '../contract/config';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst _initialState = {\r\n    price_usd: 0,\r\n    price_bnb: 0,\r\n    account: \"\",\r\n    all_nodes: 0,\r\n    my_nodes: [],\r\n    my_nfts: [],\r\n    grand_nft_url: \"\",\r\n    master_nft_url: \"\",\r\n    currentTime: 0,\r\n    contract_status: 0,\r\n    chainId: 0,\r\n    can_perform: true,\r\n    fire_value: 0\r\n}\r\n\r\nconst init = (init) => {\r\n\r\n    return init;\r\n}\r\n\r\nconst provider = Web3.providers.HttpProvider(config.testNetUrl);\r\nconst web3 = new Web3(Web3.givenProvider || provider);\r\n\r\nconst tokenContract = new web3.eth.Contract(config.FireAbi, config.FireToken);\r\nconst nftContract = new web3.eth.Contract(config.NFTAbi, config.FireNFT);\r\nconst rewardConatract = new web3.eth.Contract(config.RewardAbi, config.Reward);\r\n\r\n\r\nconst reducer = (state = init(_initialState), action) => {\r\n\r\n    if (action.type === 'UPDATE_TOKEN_PRICE') {\r\n        return Object.assign({}, state, {\r\n            price_usd: action.payload.price_usd,\r\n            price_bnb: action.payload.price_bnb\r\n        })\r\n    } else if (action.type === \"UPDATE_CHAIN_ID\") {\r\n        return Object.assign({}, state, {\r\n            chainId: action.payload.chainId\r\n        });\r\n    } else if (action.type === 'CONNECT_WALLET') {\r\n        checkNetwork(state.chainId);\r\n        web3.eth.getAccounts((err, accounts) => {\r\n            store.dispatch({\r\n                type: \"GET_USER_INFO\",\r\n                payload: { account: accounts[0] }\r\n            });\r\n        })\r\n    } else if (action.type === 'SET_CONTRACT_STATUS') {\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return state;\r\n        }\r\n\r\n        rewardConatract.methods.setContractStatus(action.payload.param)\r\n            .send({ from: state.account })\r\n            .then(() => { updateGlobalInfo() })\r\n            .catch(() => console.log);\r\n\r\n    } else if (action.type === \"SET_NFT_URL\") {\r\n\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return state;\r\n        }\r\n\r\n        if (action.payload.type === \"master\") {\r\n            nftContract.methods.setMasterNFTURI(action.payload.url)\r\n                .send({ from: state.account })\r\n                .then(() => console.log)\r\n                .catch(() => console.log);\r\n        } else if (action.payload.type === \"grand\") {\r\n            nftContract.methods.setGrandNFTURI(action.payload.url)\r\n                .send({ from: state.account })\r\n                .then(() => console.log)\r\n                .catch(() => console.log);\r\n        }\r\n    } else if (action.type === \"CLAIM_NODE\") {\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return Object.assign({}, state, { can_perform: true });\r\n        }\r\n        rewardConatract.methods.getClaimFee().call()\r\n            .then(function (claimFee) {\r\n                if (action.payload.node_id !== -1) {\r\n                    rewardConatract.methods.claimByNode(action.payload.node_id)\r\n                        .send({ from: state.account, value: claimFee, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                        }).catch(() => {\r\n                            store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                        });\r\n                } else if (action.payload.node_id === -1) {\r\n                    rewardConatract.methods.claimAll()\r\n                        .send({ from: state.account, value: claimFee * action.payload.cnt, gas: 1200000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                        }).catch(() => {\r\n                            store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                        });\r\n                }\r\n            })\r\n            .catch(() => {\r\n                store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n            });\r\n\r\n    } else if (action.type === \"BUY_NFT_ART\") {\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return Object.assign({}, state, { can_perform: true });\r\n        }\r\n        if (action.payload.type === \"master\") {\r\n            rewardConatract.methods.getMasterNFTPrice().call()\r\n                .then((price) => {\r\n                    rewardConatract.methods.buyNFT(0, 1)\r\n                        .send({ from: state.account, value: price, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                        }).catch(() => {\r\n                            store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                        })\r\n                }).catch(() => {\r\n                    store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                })\r\n        } else if (action.payload.type === \"grand\") {\r\n            rewardConatract.methods.getGrandNFTPrice().call()\r\n                .then((price) => {\r\n                    rewardConatract.methods.buyNFT(1, 1)\r\n                        .send({ from: state.account, value: price, gas: 400000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                        }).catch(() => {\r\n                            store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                        })\r\n                }).catch(() => {\r\n                    store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                })\r\n        }\r\n\r\n    } else if (action.type === \"PAY_NODE_FEE\") {\r\n        rewardConatract.methods.getNodeMaintenanceFee().call()\r\n            .then((threeFee) => {\r\n                rewardConatract.methods.payNodeFee(Number(action.payload.node_id), action.payload.duration - 1)\r\n                    .send({ from: state.account, value: action.payload.duration * threeFee, gas: 2100000 })\r\n                    .then(() => {\r\n                        store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                    }).catch(() => {\r\n                        store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                    })\r\n            }).catch(() => {\r\n                store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n            })\r\n    } else if (action.type === \"CREATE_NODE\") {\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return Object.assign({}, state, { can_perform: true });\r\n        }\r\n        const promise = [];\r\n        promise.push(rewardConatract.methods.getNodePrice().call());\r\n        promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\r\n        Promise.all(promise).then((result) => {\r\n\r\n            tokenContract.methods.approve(config.Reward, result[0]).send({ from: state.account, gas: 210000 })\r\n                .then((ret) => {\r\n                    rewardConatract.methods.buyNode(1).send({ from: state.account, value: result[1], gas: 2100000 })\r\n                        .then(() => {\r\n                            store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                        }).catch(() => {\r\n                            store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                        });\r\n                }).catch((ret) => {\r\n                    store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                });\r\n        }).catch(() => {\r\n            store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n        });\r\n\r\n    } else if (action.type === \"GET_USER_INFO\") {\r\n\r\n        let account = (action.payload && action.payload.account) ? action.payload.account : state.account;\r\n        let can_perform = (action.payload && action.payload.can_perform) ? action.payload.can_perform : state.can_perform;\r\n\r\n        let promise = [];\r\n        promise.push(rewardConatract.methods.getNFTList(account).call());\r\n        promise.push(rewardConatract.methods.getNodeList(account).call());\r\n        promise.push(rewardConatract.methods.getRewardAmount(account).call());\r\n        promise.push(nftContract.methods.getMasterNFTURI().call());\r\n        promise.push(nftContract.methods.getGrandNFTURI().call());\r\n        promise.push(rewardConatract.methods.getTotalNodeCount().call());\r\n        Promise.all(promise).then((result) => {\r\n            const nodes = [];\r\n            for (var index in result[1]) {\r\n                nodes.push({\r\n                    createTime: result[1][index].createTime,\r\n                    lastTime: result[1][index].lastTime,\r\n                    grandNFT: result[2].curGrandNFTEnable[index],\r\n                    masterNFT: result[2].curMasterNFTEnable[index],\r\n                    reward: Number(web3.utils.fromWei(result[2].nodeRewards[index])).toFixed(9),\r\n\r\n                });\r\n            }\r\n            store.dispatch({\r\n                type: \"RETURN_DATA\", payload:\r\n                {\r\n                    my_nfts: result[0],\r\n                    my_nodes: nodes,\r\n                    account: account,\r\n                    reward: result[2],\r\n                    master_nft_url: result[3],\r\n                    grand_nft_url: result[4],\r\n                    currentTime: result[2].currentTime * 1,\r\n                    all_nodes: result[5],\r\n                    can_perform: can_perform\r\n                }\r\n            });\r\n        });\r\n    } else if (action.type === \"CHANGE_REWARD_OWNER\") {\r\n        // uploadData(data1);\r\n    } else if (action.type === 'PAY_FEE_ALL') {\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return Object.assign({}, state, { can_perform: true });\r\n        }\r\n        rewardConatract.methods.getNodeMaintenanceFee().call()\r\n            .then((threeFee) => {\r\n                rewardConatract.methods.payAllNodeFee(action.payload.duration - 1)\r\n                    .send({ from: state.account, value: action.payload.duration * threeFee * 100, gas: 2100000 })\r\n                    .then(() => {\r\n                        store.dispatch({ type: \"GET_USER_INFO\", payload: { can_perform: true } });\r\n                    }).catch(() => {\r\n                        store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n                    });\r\n            }).catch((err) => {\r\n                store.dispatch({ type: \"UPDATE_CAN_PERFORM_STATUS\", payload: { can_perform: true } });\r\n            })\r\n    } else if (action.type === \"SET_PRICE_VALUE\") {\r\n        if (!state.account) {\r\n            connectAlert();\r\n            return Object.assign({}, state, { can_perform: true });\r\n        }\r\n        if (action.payload.type === \"claim_fee\") {\r\n            rewardConatract.methods.setClaimFee(web3.utils.toWei(action.payload.value, 'ether'))\r\n                .send({ from: state.account, gas: 210000 })\r\n                .then(() => {\r\n                }).catch(() => {\r\n                })\r\n        } else if (action.payload.type === \"maintenance_fee\") {\r\n            rewardConatract.methods.setNodeMaintenanceFee(web3.utils.toWei(action.payload.value, 'ether'))\r\n                .send({ from: state.account, gas: 210000 })\r\n                .then(() => {\r\n                }).catch(() => {\r\n                })\r\n        } else if (action.payload.type === \"nest_price\") {\r\n            rewardConatract.methods.setNodePrice(web3.utils.toWei(action.payload.value, 'ether'))\r\n                .send({ from: state.account, gas: 210000 })\r\n                .then(() => {\r\n                }).catch(() => {\r\n                })\r\n        } else if (action.payload.type === \"fire_price\") {\r\n            rewardConatract.methods.setFireValue(web3.utils.toWei(action.payload.value, 'ether'))\r\n                .send({ from: state.account, gas: 210000 })\r\n                .then(() => {\r\n                }).catch(() => {\r\n                })\r\n        }\r\n        let promise = [];\r\n        promise.push(rewardConatract.methods.getClaimFee().call());\r\n        promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\r\n        promise.push(rewardConatract.methods.getNodePrice().call());\r\n        promise.push(rewardConatract.methods.getFireValue().call());\r\n        Promise.all(promise).then((result) => {\r\n            store.dispatch({\r\n                type: \"RETURN_DATA\",\r\n                payload: {\r\n                    claim_fee: web3.utils.fromWei(result[0], 'ether'),\r\n                    maintenance_fee: web3.utils.fromWei(result[1], 'ether'),\r\n                    nest_price: web3.utils.fromWei(result[2], 'ether'),\r\n                    fire_price: web3.utils.fromWei(result[3], 'ether')\r\n                }\r\n            });\r\n        })\r\n        // store.dispatch({type:\"GET_ADMIN_PRICE\"});\r\n    } else if (action.type === \"RETURN_DATA\") {\r\n        return Object.assign({}, state, action.payload);\r\n    } else if (action.type === \"UPDATE_CAN_PERFORM_STATUS\") {\r\n        return Object.assign({}, state, {\r\n            can_perform: action.payload.can_perform\r\n        });\r\n    } else if (action.type === \"GET_ADMIN_PRICE\") {\r\n        let promise = [];\r\n        promise.push(rewardConatract.methods.getClaimFee().call());\r\n        promise.push(rewardConatract.methods.getNodeMaintenanceFee().call());\r\n        promise.push(rewardConatract.methods.getNodePrice().call());\r\n        promise.push(rewardConatract.methods.getFireValue().call());\r\n        Promise.all(promise).then((result) => {\r\n            store.dispatch({\r\n                type: \"RETURN_DATA\",\r\n                payload: {\r\n                    claim_fee: web3.utils.fromWei(result[0], 'ether'),\r\n                    maintenance_fee: web3.utils.fromWei(result[1], 'ether'),\r\n                    nest_price: web3.utils.fromWei(result[2], 'ether'),\r\n                    fire_price: web3.utils.fromWei(result[3], 'ether')\r\n                }\r\n            });\r\n        })\r\n    } else if (action.type === \"GET_FIRE_VALUE\") {\r\n        rewardConatract.methods.getAvaxForFire(1).call().then((value)=>{\r\n            return store.dispatch({type:\"RETURN_DATA\", payload:{fire_value: value}});\r\n        });\r\n    }\r\n    return state;\r\n}\r\n\r\nconst connectAlert = () => {\r\n    toast.info(\"Please connect your wallet!\", {\r\n        position: \"top-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n    });\r\n}\r\n\r\nconst checkNetwork = (chainId) => {\r\n\r\n    if (web3.utils.toHex(chainId) !== web3.utils.toHex(config.chainId)) {\r\n        toast.info(\"Change network to Avalanche C Chain!\", {\r\n            position: \"top-center\",\r\n            autoClose: 3000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nconst updateGlobalInfo = () => {\r\n    let promise = [];\r\n    promise.push(nftContract.methods.getMasterNFTURI().call());\r\n    promise.push(nftContract.methods.getGrandNFTURI().call());\r\n    promise.push(rewardConatract.methods.getTotalNodeCount().call());\r\n    promise.push(rewardConatract.methods.getContractStatus().call());\r\n    promise.push(rewardConatract.methods.getAvaxForFire(1).call());\r\n    promise.push(rewardConatract.methods.getAvaxForUSD(1000000).call());\r\n    promise.push(tokenContract.methods.balanceOf(config.treasuryAddr).call());\r\n    Promise.all(promise).then((result) => {\r\n        store.dispatch({\r\n            type: \"RETURN_DATA\",\r\n            payload: {\r\n                master_nft_url: result[0],\r\n                grand_nft_url: result[1],\r\n                all_nodes: result[2],\r\n                contract_status: result[3],\r\n                treasury_balance: Number(web3.utils.fromWei(result[6], 'ether') * result[4] / web3.utils.fromWei(result[5], 'ether')).toFixed(2)\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\nconst store = createStore(reducer);\r\nif (window.ethereum) {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n        store.dispatch({\r\n            type: \"GET_USER_INFO\",\r\n            payload: { account: accounts[0] }\r\n        });\r\n    })\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n        checkNetwork(chainId);\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: chainId }\r\n        });\r\n    });\r\n    web3.eth.getChainId().then((chainId) => {\r\n        checkNetwork(chainId);\r\n        store.dispatch({\r\n            type: \"UPDATE_CHAIN_ID\",\r\n            payload: { chainId: chainId }\r\n        });\r\n    })\r\n    updateGlobalInfo();\r\n}\r\n\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}